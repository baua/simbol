# vim: tw=0:ts=4:sw=4:et:ft=bash

core:import dns

#. Internal Functions -={
declare -g g_PASSWD_CACHED=
function :ldap:authenticate() {
    local -i e=${CODE_FAILURE}
    if [ ${#g_PASSWD_CACHED} -eq 0 ]; then
        read -p "Enter LDAP (${USER_LDAPHOST_RW}) Password: " -s g_PASSWD_CACHED
        ldapsearch -x -h ${USER_LDAPHOST_RW} -D "uid=${USER_USERNAME},${USER_UDN}" -w "${g_PASSWD_CACHED}" -b ${USER_UDN} >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            e=${CODE_SUCCESS}
        else
            g_PASSWD_CACHED=
        fi
        echo
    else
        e=${CODE_SUCCESS}
    fi
    return $e
}

#. LDAP Return Copes
#. 0   - LDAP_SUCCESS
#. 1   - LDAP_OPERATIONS_ERROR
#. 10  - LDAP_REFERRAL
#. 16  - LDAP_NO_SUCH_ATTRIBUTE
#. 19  - LDAP_CONSTRAINT_VIOLATION
#. 20  - LDAP_TYPE_OR_VALUE_EXISTS

function :ldap:modify() {
    local -i e=${CODE_FAILURE}
    if [ $# -ge 2 ]; then
        local context=$1
        case $context in
            user)
                local username=$2
                local change=$3
                if :ldap:authenticate; then
                    case ${change} in
                        delete|add|replace)
                            #cat <<! >/dev/stderr
                            ldapmodify -x -h ${USER_LDAPHOST_RW} -D "uid=${USER_USERNAME},${USER_UDN}" -w "${g_PASSWD_CACHED}" -c <<! >/dev/null 2>&1
dn: uid=${username},${USER_UDN}
changetype: modify
$(
    local attr=
    for ((i=4; i<$#+1; i++)); do
        if [ "${!i}" != "-" -a ${#attr} -gt 0 ]; then
            printf "\n${attr}: ${!i}";
        else
            if [ ${#attr} -gt 0 ]; then
                printf "\n-\n"
                ((i++))
            fi
            attr=${!i}
            printf "${change}: ${attr}"
        fi
    done;
    printf "\n "
)
!
                            e=$?
                            #echo ${USER_LDAPHOST_RW} $e > /dev/stderr
                        ;;
                    esac
                fi
            ;;
        esac
    fi
    return $e
}

function :ldap:eval:search() {
    local -i e=${CODE_FAILURE}

    if [ $# -ge 2 ]; then
        local context=$1
        local username=$2
        shift 2
        case $context in
            user)
                local userdata=$(
                    ldapsearch -LLL -h "${USER_LDAPHOST}" -x -b "${USER_UDN}" "uid=${username}" ${@}
                )
                for attr in $@; do
                    local r=$(
                        echo "${userdata}" \
                            | grep -Po "^${attr}:\s+.*"\
                            | cut -d' ' -f2\
                            | tr -d '\n'
                    )
                    echo "local ldap_${attr}='${r}';"
                done

                e=${CODE_SUCCESS}
            ;;
        esac
    fi

    return $e
}
#. }=-
#. Public Functions -={
function ldap:ngldif:usage() { echo "<host> [<host> [...]]"; }
function ldap:ngldif() {
    local -i e=${CODE_DEFAULT?}

    if [ $# -ge 1 ]; then
        e=${CODE_SUCCESS}
        for host in $@; do
            local -a hsns
            hsns=( $(:dns:qdn ${host}) )
            if [ $? -eq 0 ]; then
                local hsn
                for hsn in ${hsns[@]}; do
                    echo -e "nisNetgroupTriple: (${hsn//\.*/},,)"
                    echo -e "nisNetgroupTriple: (${hsn}.${USER_TLD},,)"
                    echo -e "nisNetgroupTriple: (${hsn}.${USER_TLD_MGMT},,)"
                done
            else
                e=${CODE_FAILURE}
            fi
        done
    fi

    return $e
}

function ldap:ping:usage() { echo " "; }
function ldap:ping() {
    core:requires colordiff

    local -i e=${CODE_DEFAULT}

    if [ $# -eq 0 ]; then
        local -i e=${CODE_SUCCESS}

        local -A sync
        local -A sync_code
        local -A dump
        local md5
        local uidc
        for uidc in {a..z}; do

            cpf "Integrity check for %{c:uid=}%{r:${uidc}*}..."
            local -A md5s=()
            for lh in ${USER_LDAPHOSTS[@]}; do
                dump[${lh}]=$( (ldapsearch -E pr=128/noprompt -S dn -LLL -h "${lh}" -x -b "${USER_UDN}" uid="${uidc}*" modifyTimestamp createTimestamp |grep -v 'pagedresults:' 2>/dev/null))
                if [ $? -eq 0 ]; then
                    cpf '.'
                else
                    cpf '!'
                    #core:raise EXCEPTION_UNHANDLED
                fi
                md5="$(echo ${dump[${lh}]}|md5sum|awk '{print$1}')"
                md5s[${md5}]=${lh}
            done

            local -i len=$(echo "${dump[${USER_LDAPHOST}]}"|wc -c)
            if [ ${#md5s[@]} -eq 1 ]; then
                if [ ${len} -gt 1 ]; then
                    theme HAS_PASSED ${md5}:${len}
                else
                    theme HAS_WARNED ${md5}:${len}
                fi
            else
                theme HAS_FAILED "${#md5s[@]} variants in the ${#USER_LDAPHOSTS[@]} hosts"
                e=${CODE_FAILURE}
                for lh in ${USER_LDAPHOSTS[@]}; do
                    if [ ${lh} != ${USER_LDAPHOST} ]; then
                        cpf "%{@host:${USER_LDAPHOST}} vs %{@host:${lh}}...\n"
                        colordiff -a -u\
                            <(echo "${dump[${USER_LDAPHOST}]}") \
                            <(echo "${dump[${lh}]}")
                    fi
                done
            fi
        done

    fi

    return $e
}
#. }=-

function :ldap:search() {
    local -i e=${CODE_DEFAULT?}
    if [ $# -gt 1 ]; then
        local bdn
        case $1 in
            user)  bdn=${USER_UDN};;
            group) bdn=${USER_GDN};;
            ng)    bdn=${USER_NDN};;
            *) core:raise EXCEPTION_BAD_FN_CALL;;
        esac

        if [ ${#bdn} -gt 0 ]; then
            shift 1

            local -a attr
            local token
            for token in $@; do
                if ! [[ ${token} =~ .+([\<\>]?=).+ ]]; then
                    attr+=( ${token} )
                fi
            done

            local -i awknf=$((${#attr[@]}*2+2)) #. 2 for dn and value, and 2 for each attr required
            local awkfields='$4'
            for ((i=6; i<=${#attr[@]}*2+2; i+=2)); do
                awkfields+=",\$$i"
            done

            #. Script-readable dump
            ldapsearch -LLL -h "${USER_LDAPHOST}" -x -b "${bdn}" $@\
                | awk 'BEGIN{RS="\n\n";IFS="[: \n]"}{if(NF=='${awknf}'){print'${awkfields}'}}'

            [ ${PIPESTATUS[0]} -ne 0 ] || e=${CODE_SUCCESS}
        fi
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}
#function ldap:search:usage() { echo "user|group|ng <args> (see man(1) ldapsearch)"; }

#. }=-
