# vim: tw=0:ts=4:sw=4:et:ft=bash

core:import dns

#. Internal Functions -={
declare -g g_PASSWD_CACHED=
function :ldap:modify() {
    local -i e=${CODE_FAILURE}
    if [ $# -ge 2 ]; then
        local context=$1
        case $context in
            user)
                local username=$2
                local change=$3
                local attr=
                if [ ${#g_PASSWD_CACHED} -eq 0 ]; then
                    read -p "Enter LDAP Password: " -s g_PASSWD_CACHED
                    echo
                fi
                case ${change} in
                    delete|add|replace)
                        #cat <<!
                        ldapmodify -x -h ${USER_LDAPHOST} -D "uid=${USER_USERNAME},${USER_UDN}" -w "${g_PASSWD_CACHED}" -c <<! >/dev/null 2>&1
dn: uid=${username},${USER_UDN}
changetype: modify
$(
    for ((i=4; i<$#+1; i++)); do
        if [ "${!i}" != "-" -a ${#attr} -gt 0 ]; then
            printf "\n${attr}: ${!i}";
        else
            if [ ${#attr} -gt 0 ]; then
                printf "\n-\n"
                ((i++))
            fi
            attr=${!i}
            printf "${change}: ${attr}"
        fi
    done;
    printf "\n "
)
!
                        e=$?
                    ;;
                esac
            ;;
        esac
    fi
    return $e
}
#. }=-
#. Public Functions -={
function ldap:ngldif:usage() { echo "<host> [<host> [...]]"; }
function ldap:ngldif() {
    local -i e=${CODE_DEFAULT?}

    if [ $# -ge 1 ]; then
        e=${CODE_SUCCESS}
        for host in $@; do
            local -a hsns
            hsns=( $(:dns:qdn ${host}) )
            if [ $? -eq 0 ]; then
                local hsn
                for hsn in ${hsns[@]}; do
                    echo -e "nisNetgroupTriple: (${hsn//\.*/},,)"
                    echo -e "nisNetgroupTriple: (${hsn//\.*/}.${USER_TLD},,)"
                    echo -e "nisNetgroupTriple: (${hsn//\.*/}.${USER_TLD_MGMT},,)"
                done
            else
                e=${CODE_FAILURE}
            fi
        done
    fi

    return $e
}

function ldap:ping:usage() { echo " "; }
function ldap:ping() {
    local -i e=${CODE_SUCCESS}

    local -A sync
    local -A sync_code
    local -i count
    for lh in ${USER_LDAPHOSTS[@]}; do
        c a_host '%-32s' "${lh}"
        count=$(ldapsearch -LLL -h "${lh}" -x -b "${USER_UDN}" dn 2>/dev/null|wc -c)
        if [ $? -eq 0 ]; then
            c HAS_PASSED "[${count}-char dump]"
        else
            c HAS_FAILED
            e=${CODE_FAILURE}
        fi
    done

    return $e
}
#. }=-

function ldap:search:usage() { echo "user|group|ng <args> (see man(1) ldapsearch)"; }
function ldap:search() {
    local -i e=${CODE_DEFAULT?}

    if [ $# -gt 1 ]; then
        local bdn
        case $1 in
            user)  bdn=${USER_UDN};;
            group) bdn=${USER_GDN};;
            ng)    bdn=${USER_NDN};;
        esac

        if [ ${#bdn} -gt 0 ]; then
            shift 1
            ldapsearch -LLL -h "${USER_LDAPHOST}" -x -b "${bdn}" $@
            [ $? -ne 0 ] || e=${CODE_SUCCESS}
        fi
    fi

    return $e
}
#. }=-
