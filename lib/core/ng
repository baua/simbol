# vim: tw=0:ts=4:sw=4:et:ft=bash
core:import dns
core:import ldap

#. Internal Functions -={
function ::ng:tree_data() {
    local -i e=${CODE_FAILURE?}

    if [ $# -eq 1 -o $# -eq 4 ]; then
        local -i rflag=${1:-0}
        local -i hflag=${2:-0}
        local -i vflag=${3:-0}
        shift $(($#-1))

        local parent=$1
        local child
        local -a children

        IFS='|||' read -a children <<< "$(:ldap:search netgroup cn=${parent} memberNisNetgroup)"
        for child in ${children[@]}; do
            if [ ${vflag} -eq 0 ]; then
                echo ${parent}:?+${child}
            else
                local hit="$(:ldap:search netgroup cn=${child} cn)"
                if [ ${#hit} -gt 0 ]; then
                    IFS='|||' read -a mnN <<< "$(:ldap:search netgroup cn=${child} memberNisNetgroup)"
                    IFS='|||' read -a nnT <<< "$(:ldap:search netgroup cn=${child} nisNetgroupTriple)"
                    if [ ${#mnN[@]} -gt 0 -o ${#nnT[@]} -gt 0 ]; then
                        echo ${parent}:1+${child} #. Child exists and has children
                    else
                        echo ${parent}:0+${child} #. Child exists but has no children
                    fi
                else
                    echo ${parent}:-+${child} #. Child does not exist
                fi
            fi

            if [ ${rflag} -eq 1 ]; then
                ${FUNCNAME} ${rflag} ${hflag} ${vflag} ${child}
            fi
        done

        if [ ${hflag} -eq 1 ]; then
            IFS='|||' read -a children <<< "$(:ldap:search netgroup cn=${parent} nisNetgroupTriple)"
            for child in ${children[@]}; do
                if echo ${child} | grep -qE ${USER_TLD}; then
                    child=$(echo ${child}|tr -d '(),')
                    if [ ${vflag} -eq 0 ]; then
                        echo ${parent}:?@${child/.${USER_TLD?}/}
                    else
                        looked=$(:dns:lookup pP ca ${child})
                        if [ $? -eq 0 ]; then
                            echo ${parent}:1@${child/.${USER_TLD?}/}
                        else
                            echo ${parent}:-@${child/.${USER_TLD?}/}
                        fi
                    fi
                fi
            done
        fi

        e=${CODE_SUCCESS}
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}

function ::ng:tree_draw() {
    if [ $1 -eq 0 ]; then
        cpf "%{@netgroup:%s}\n" "${g_root:2}"
    fi

    local -i i=$1
    local prefix=$(printf " %$((${i}*4))s%%{bl:|___ }" ' ')
    ((i++))

    local child
    IFS=, read -a children <<< "${g_tree[${2?}]}"
    for child in ${children[@]}; do
        if [ ${child:1:1} == '+' ]; then
            if [ ${child:0:1} == '1' ]; then
                cpf "${prefix}%{@netgroup:%s}\n" "${child:2}"
            elif [ ${child:0:1} == '?' ]; then
                cpf "${prefix}%{@netgroup:%s}\n" "${child:2}"
            elif [ ${child:0:1} == '0' ]; then
                cpf "${prefix}%{@netgroup_empty:%s}\n" "${child:2}"
            elif [ ${child:0:1} == '-' ]; then
                cpf "${prefix}%{@netgroup_missing:%s}\n" "${child:2}"
            else
                theme ERR_INTERNAL "${child} is an invalid entry; ${child:0:1} is unknown"
                core:raise EXCEPTION_BAD_FN_CALL
            fi
            ${FUNCNAME} $i ${child:2}
        elif [ ${child:1:1} == '@' ]; then
            if [ ${child:0:1} == '1' ]; then
                cpf "${prefix}%{@host:%s}\n" "${child:2}"
            elif [ ${child:0:1} == '-' ]; then
                cpf "${prefix}%{@host_bad:%s}\n" "${child:2}"
            elif [ ${child:0:1} == '?' ]; then
                cpf "${prefix}%{@host:%s}\n" "${child:2}"
            else
                theme ERR_INTERNAL "${child} is an invalid entry; ${child:0:1} is unknown"
                core:raise EXCEPTION_BAD_FN_CALL
            fi
        else
            theme ERR_INTERNAL "${child} is an invalid entry; ${child:1:1} is unknown"
            core:raise EXCEPTION_BAD_FN_CALL ${child}
        fi
    done
}

function ::ng:tree_build() {
    : ${g_root:=$1}
    : ${g_tree}

    local grandparent=$1
    shift

    local token
    for token in $@; do
        IFS=: read parent child <<< "${token}"
        if [ "${parent}" == "${grandparent:2}" ]; then
            if [ -n "${g_tree[${grandparent:2}]}" ]; then
                if ! echo "${g_tree[${grandparent:2}]}"|grep -qE "\<${child}\>"; then
                    g_tree[${grandparent:2}]+=,${child}
                fi
            else
                g_tree[${grandparent:2}]=${child}
            fi
        fi
    done

    if [ -n "${g_tree[${grandparent:2}]}" ]; then
        IFS=, read -a children <<< "${g_tree[${grandparent:2}]}"
        for child in ${children[@]}; do
            if [ ${child:1:1} == '+' ]; then
                ${FUNCNAME} ${child} $@
            fi
        done
    fi
}
#. }=-

#. Private Functions -={

function :ng:ping() {
    local -i e=${CODE_FAILURE?}

    if [ $# -eq 1 ]; then
        hit=$(:ldap:search netgroup cn="$1" cn|wc -l)
        [ ${hit} -eq 0 ] || e=${CODE_SUCCESS}
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}

function :ng:resolve() {
    local -i e=${CODE_FAILURE?}

    if [ $# -eq 1 ]; then
        if :ng:ping $1; then
            IFS='|||' read -a children <<< "$(:ldap:search netgroup cn=$1 memberNisNetgroup)"
            for child in ${children[@]}; do
                :ng:resolve $child
            done
            IFS='|||' read -a children <<< "$(:ldap:search netgroup cn=$1 nisNetgroupTriple)"
            for child in ${children[@]}; do
                if echo ${child}|grep -q "${USER_TLD}"; then
                    echo ${child/.${USER_TLD?}/}|tr -d '(),'
                fi
            done
            e=${CODE_SUCCESS}
        fi
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}
#. }=-

#. Public Functions -={
function ng:tree:shflags() {
    cat <<!
boolean recursive false "traverse-the-netgroup-tree-recursively" R
boolean showhosts false "show-host-leaf-nodes-in-netgroup-tree"  H
boolean verifyall false "verify-all-entries"                     V
!
}
function ng:tree:usage() { echo "<flags>"; }
function ng:tree() {
    local -i e=${CODE_DEFAULT?}

    if [ $# -ge 1 ]; then
        local -i recursive=${FLAGS_recursive:-0}; ((recursive=!recursive)); unset FLAGS_recursive
        local -i showhosts=${FLAGS_showhosts:-0}; ((showhosts=!showhosts)); unset FLAGS_showhosts
        local -i verifyall=${FLAGS_verifyall:-0}; ((verifyall=!verifyall)); unset FLAGS_verifyall

        declare -g -A g_tree
        ::ng:tree_build 1+$1 $(::ng:tree_data ${recursive} ${showhosts} ${verifyall} $1)
        if [ $? -ne ${CODE_SUCCESS} ]; then
            e=${CODE_FAILURE}
            theme ERR "No such netgroups \`$1'"
        else
            if :ng:ping ${g_root:2}; then
                ::ng:tree_draw 0 ${g_root:2}
                e=${CODE_SUCCESS}
            else
                e=${CODE_FAILURE}
                theme ERR "No such netgroups \`${g_root:2}'"
            fi
        fi
        unset g_tree g_root
    fi

    return $e
}

function :ng:hosts() {
    local -i e=${CODE_FAILURE?}

    if [ $# -eq 1 ]; then
        local -a data
        if :ng:ping $1; then
            data=( $(:ng:resolve ${1}|sort -u) )
            printf '%s\n' "${data[@]}"
            e=${CODE_SUCCESS?}
        fi
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}

function ng:hosts:usage() { echo "<netgroup>"; }
function ng:hosts() {
    local -i e=${CODE_DEFAULT?}

    if [ $# -eq 1 ]; then
        cpf "Looking up netgroup %{@netgroup:%s}..." ${1}
        local -a data
        data=( $(:${FUNCNAME} $1) )
        if [ $? -eq ${CODE_SUCCESS} ]; then
            e=${CODE_SUCCESS}
            if [ ${#data[@]} -eq 0 ]; then
                theme HAS_WARNED "Empty netgroup"
            else
                theme HAS_PASSED
                local shn
                for shn in ${data[@]}; do
                    cpf "    %{@host:%s}\n" ${shn}
                done
            fi
        else
            e=${CODE_FAILURE}
            theme HAS_FAILED "No such netgroup"
        fi
    fi

    return $e
}

function :ng:host() {
    #. This function, contrary to the general rule, is not used by it's public version,
    #. it's simply a copy of it which simply generates non-fancy script-useable output.
    #.
    #. Of course all user-friendly crap such as suggestions and such have been removed.
    local -i e=${CODE_FAILURE?}

    local -i hni
    : ${hni:=${2:-0}}
    if [ $# -eq 1 -o $# -eq 2 ]; then
        ((hni++))

        local prefix ng
        local -a raw
        if [ ${hni} -eq 1 ]; then
            e=${CODE_SUCCESS}

            local fqdn
            local -a hosts
            if [ -z "${1//[^.]/}" ]; then
                fqdn="$(:dns:qdn ${1}).${USER_TLD}"
                if [ $? -eq 0 ]; then
                    hosts=( "${fqdn}" )
                else
                    e=${CODE_FAILURE}
                fi
            else
                hosts=( ${1?}.${USER_TLD} )
            fi

            if [ $e -eq ${CODE_SUCCESS} ]; then
                local -a raw
                for fqdn in ${hosts[@]}; do
                    local -a preraw=( $(:ldap:search netgroup nisNetgroupTriple="\(${fqdn},,\)" cn ))

                    if [ ${#preraw[@]} -gt 0 ]; then
                        raw=( ${preraw[@]} )
                    fi
                done
            fi
        else
            ng=$1
            raw=( $(:ldap:search netgroup memberNisNetgroup="${ng}" cn ) )
            e=${CODE_SUCCESS}
        fi

        if [ $e -eq ${CODE_SUCCESS} ]; then
            for ng in ${raw[@]}; do
                prefix="$(printf %$((${hni}*2))s ' ')"
                cpf "${prefix} %s\n" "${ng}"
                ${FUNCNAME} "$ng" ${hni}
            done
        fi
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}

function ng:host:usage() { echo "<hostname>"; }
function ng:host() {
    local -i e=${CODE_DEFAULT?}

    local -i hni
    : ${hni:=${2:-0}}
    if [ $# -eq 1 -o $# -eq 2 ]; then
        ((hni++))

        local prefix ng
        local -a raw
        if [ ${hni} -eq 1 ]; then
            e=${CODE_SUCCESS}

            local fqdn
            local -a hosts
            if [ -z "${1//[^.]/}" ]; then
                fqdn="$(:dns:qdn ${1}).${USER_TLD}"
                if [ $? -eq 0 ]; then
                    hosts=( "${fqdn}" )
                else
                    e=${CODE_FAILURE}
                fi
            else
                hosts=( ${1?}.${USER_TLD} )
            fi

            if [ $e -eq ${CODE_SUCCESS} ]; then
                local -a raw
                for fqdn in ${hosts[@]}; do
                    if [ -t 1 ]; then
                        cpf "Trying %{@fqdn:%s}..." ${fqdn}
                    fi

                    local -a preraw=( $(:ldap:search netgroup nisNetgroupTriple="\(${fqdn},,\)" cn) )

                    if [ ${#preraw[@]} -eq 0 ]; then
                        theme HAS_WARNED "There are no netgroups with \`${fqdn}' as a member"
                    else
                        theme HAS_PASSED
                        raw=( ${preraw[@]} )
                        break
                    fi
                done
            else
                theme HAS_FAILED "No such host ${1}"
            fi
        else
            ng=$1
            raw=( $(:ldap:search netgroup memberNisNetgroup="${ng}" cn) )
            e=${CODE_SUCCESS}
        fi

        if [ $e -eq ${CODE_SUCCESS} ]; then
            for ng in ${raw[@]}; do
                local col='indirect'
                [ ${hni} -ne 1 ] || col='direct'
                prefix="$(printf %$((${hni}*2))s ' ')"
                cpf "${prefix} %{@netgroup_${col}:%s}\n" "${ng}"
                ${FUNCNAME} "$ng" ${hni}
            done
        else
            local -a didumean=( $(:ldap:search "nisNetgroupTriple~=${fqdn}" nisNetgroupTriple) )
            if [ ${#didumean[@]} -gt 0 ]; then
                printf "? %s\n" ${didumean[@]}
            fi
        fi

    fi

    return $e
}

function ng:search:usage() { echo "<search-token>"; }
function ng:search() {
    local -i e=${CODE_DEFAULT?}

    if [ $# -eq 1 ]; then
        :ldap:search netgroup cn description "|(cn=*$1*)(description=*$1*)" |
            column -t -s'+++'
        e=$?
    fi

    return $e
}


function ng:summary:usage() { echo ""; }
function ng:summary() {
    local -i e=${CODE_DEFAULT?}

    if [ $# -eq 0 ]; then
        :ldap:search netgroup cn description
        e=$?
    fi

    return $e
}

#function ng:report:usage() { echo "<no-args>"; }
#function ng:report() {
#    local -i e=${CODE_DEFAULT?}
#
#    if [ $# -eq 0 ]; then
#        local -a ng_all=( $(ldapsearch -h ${USER_LDAPHOST} -LLL -x -b "${USER_NDN}" cn | awk '$1~/cn:/{print$2}') )
#        local -i progress=0
#        local -i total=${#ng_all[@]}
#        local -a hosts_all
#        local ng
#        for ng in ${ng_all[@]}; do
#            hosts_all+=( $(:ng:resolve 0 1 $ng|awk -F: '$2~/^@/{print}') )
#            progress+=1
#            cpf "\r%d%% (%d/%d) %{@netgroup:%s}" $(( 100 * $progress / ${total} )) ${progress} ${total} ${ng}
#            tput el
#        done
#        cpf "\rNetgroup assessment complete"; tput el; echo
#
#        local host item
#        for item in ${hosts_all[@]}; do
#            IFS=: read ng host <<< "${item}"
#            looked=$(:dns:lookup pP ca ${host:2})
#            if [ $? -ne 0 ]; then
#                cpf "%{@host:%32s}@%{@netgroup:%-24s}" ${host:2} ${ng:2}
#                theme HAS_FAILED
#            fi
#        done
#        e=${CODE_SUCCESS?}
#    fi
#
#    return $e
#}

#. }=-
