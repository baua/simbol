# vim: tw=0:ts=4:sw=4:et:ft=bash

:<<[core:docstring]
Core DNS module
[core:docstring]

core:import util

#. Internal Functions -={
function :dns:lookup() {
    #. while read line; do
    #.     read record tldid query sdn answer <<< ${line}
    #.     ...
    #. done < <(:dns:lookup ${tldidstr} ca ${hostname})
    #. e=$?
    #.
    #. read record tldid query sdn answer <<< "$(:dns:lookup p a ${hostname})"

    local -i e=${CODE_FAILURE?}

    if [ $# -eq 3 ]; then
        local tldids records hint
        read tldids records hint <<< $@

        local hn_hint=${hint%%.*}
        local sd_hint
        [ "${hn_hint}" == "$hint" ] || sd_hint=${hint#*.}

        local tldid
        tldid=$(:dns:qualified ${hint})
        if [ $? -ne ${CODE_SUCCESS} ]; then
            local -i i
            local -a sdns
            if [ -n "${sd_hint}" ]; then
                sdns=( "${sd_hint}" )
            else
                for (( i=0; i<${#tldids}; i++ )); do
                    tldid=${tldids:$i:1}
                    sdns+=( $(:dns:subdomains ${tldid}) )
                done
            fi
        else
            sdns=( ${sd_hint%%.${USER_TLDS[${tldid}]}} )
        fi

        local sdn
        local fqdn
        local result
        local -A results
        for sdn in ${sdns[@]}; do
            #. First see if the sdn is actually the entire dn
            qdn=${hn_hint}.${sdn}
            result=$(dig +short ${qdn} a|head -n1)

            #. If not...
            if [ ${#result} -eq 0 ]; then
                #. Check all subnets for that tldid...
                for (( i=0; i<${#tldids}; i++ )); do
                    tldid=${tldids:$i:1}
                    fqdn=${qdn}.${USER_TLDS[${tldid}]}
                    if [ "${records//a/}" != "${records}" ]; then
                        result=$(dig +short ${fqdn} a|head -n1)
                        if [ "${result//[0-9]/}" == '...' ]; then
                            [ ${#result} -eq 0 ] || results[${fqdn}]="${tldid}:a:${sdn}:${result}"
                        fi
                    fi
                    if [ "${records//c/}" != "${records}" ]; then
                        result=$(dig +short ${fqdn} cname)
                        [ ${#result} -eq 0 ] || results[${fqdn}]="${tldid}:c:${sdn}:${result%%.}"
                    fi
                done
            else
                #. If so, work backwards
                fqdn=${qdn}
                #. Incomplete?
                if [ "${records//a/}" != "${records}" ]; then
                    for tldid in ${!SITE_TLDS[@]}; do
                        tld=${SITE_TLDS[${tldid}]}
                        if [ ${sdn//${tld}/} != "${sdn}" ]; then
                            sdn=${sdn//.${tld}/}
                            [ ${#result} -eq 0 ] || results[${fqdn}]="${tldid}:a:${sdn}:${result}"
                            break
                        fi
                    done
                fi
            fi
        done

        local query record answer records sdn
        if [ ${#results[@]} -gt 0 ]; then
            for query in ${!results[@]}; do
                IFS=: read tldid record sdn answer <<< "${results[${query}]}"
                printf "%-3s %-3s %-24s %-32s %s\n" ${record} ${tldid} ${query} ${sdn} ${answer}
            done
            e=${CODE_SUCCESS}
        fi
    fi

    return $e
}

function :dns:qualified() {
    local -i e=${CODE_FAILURE}

    local tldid
    for tldid in ${!USER_TLDS[@]}; do
        local tld=${USER_TLDS[${tldid}]}
        if [ ${1%%.${tld}} != ${1} ]; then
            e=${CODE_SUCCESS}
            echo ${tldid}
            break
        fi
    done

    return $e
}

function :dns:fqdn() {
    local -i e=${CODE_FAILURE}

    if [ $# -eq 2 ]; then
        local -r tldid=$1
        local -r hint=$2
        local -r shn=${hint%%.*}
        local line record _tldid query sdn answer
        while read line; do
            read record _tldid query sdn answer <<< ${line}
            echo ${query}
            e=${CODE_SUCCESS}
        done < <(:dns:lookup ${tldid} a ${hint})
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}
#. }=-
#. Public Functions -={
function dns:fqdn:usage() { echo "-T|--tldid <tldid> <hosthint>"; }
function dns:fqdn() {
    local -i e=${CODE_DEFAULT?}

    local tldid=${g_TLDID}
    if [ $# -eq 1 -a ${#tldid} -gt 0 ]; then
        local hosthint=$1
        :dns:fqdn ${tldid} ${hosthint}
        e=$?
    fi

    return $e
}

function :dns:qdn() {
    e=${CODE_FAILURE}

    if [ $# -eq 2 ]; then
        local -r tldid=$1
        local -r hint=$2
        local -r shn=${hint%%.*}
        local line record _tldid query sdn answer
        while read line; do
            read record _tldid query sdn answer <<< ${line}
            echo "${shn}.${sdn}"
            e=${CODE_SUCCESS}
        done < <(:dns:lookup ${tldid} a ${hint})
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}

function dns:qdn:usage() { echo "-T|--tldid <tldid> <hosthint>"; }
function dns:qdn() {
    local -i e=${CODE_DEFAULT?}

    local tldid=${g_TLDID}
    if [ $# -eq 1 -a ${#tldid} -gt 0 ]; then
        local hosthint=$1
        :dns:qdn ${tldid} ${hosthint}
        e=$?
    fi

    return $e
}

function dns:lookup:usage() { echo "<hosthint>"; }
function dns:lookup() {
    local -i e=${CODE_DEFAULT?}

    if [ $# -eq 1 ]; then
        hint=$1
        e=${CODE_FAILURE}
        local -a tldids=( ${!USER_TLDS[@]} )
        local tldidstr=$(:util:join '' tldids)
        local line record tldid query sdn answer
        while read line; do
            read record tldid query sdn answer <<< ${line}
            if [ "${record}" == 'c' ]; then
                cpf "%{@ip:%-48s}" "${query}"
                cpf "%{@comment:#. iface:%s, (%s for %s)}" "${USER_IFACE[${tldid}]}" "CNAME RECORD" "${answer}"
                e=${CODE_SUCCESS}
            elif [ "${record}" == 'a' ]; then
                cpf "%{@host:%-48s}" "${query}"
                cpf "%{@comment:#. iface:%s, (%s for %s)}" "${USER_IFACE[${tldid}]}" "A RECORD" "${answer}"
                e=${CODE_SUCCESS}
            fi
            echo
        done < <(:dns:lookup ${tldidstr} ca ${hint})
    fi

    return $e
}

function dns:cname:usage() { echo "-T|--tldid <tldid> <netgroup> <cname-subdomain>"; }
function dns:cname() {
    local -i e=${CODE_DEFAULT?}

    core:import ng

    local tldid=${g_TLDID}
    if [ $# -eq 2 -a ${#tldid} -gt 0 ]; then
        local ng=$1
        local cnamesd=${2}
        local hosts_in_ng
        hosts_in_ng="$(:ng:hosts ${tldid} ${ng} )"
        if [ $? -eq 0 ]; then
            local -a hosts=( $(sed -e 's/\([^\.]\+\)\..*/\1/' <<< "$hosts_in_ng") )
            local cnamea=
            local host record tldid query sdn answer
            if [ ${#hosts[@]} -gt 0 ]; then
                for host in ${hosts[@]}; do
                    read record tldid query sdn answer <<< "$(:dns:lookup p a ${host})"
                    if [ $? -eq 0 ]; then
                        ip="${answer}"

                        cname="${host}.${cnamesd}.${USER_TLD}"
                        cnamea=$(dig +short ${cname}|head -n1)
                        cnameip=$(dig +short ${cnamea}|tail -n1)
                        cnamea=${cnamea//.${USER_TLD}./}

                        cpf "%{@host:%-24s} %{@host:%-24s} %{@ip:%-16s}" ${host}.${cnamesd} ${cnamea} ${cnameip}
                        if [[ ${cnamea} =~ ^${host}\..* ]]; then
                            theme HAS_PASSED
                        else
                            e=${CODE_FAILURE}
                            theme HAS_FAILED
                        fi
                    else
                        e=${CODE_FAILURE}
                        theme HAS_FAILED
                    fi
                done
            else
                e=${CODE_FAILURE}
            fi
        else
            e=${CODE_FAILURE}
            theme HAS_FAILED
        fi
    fi

    return $e
}

function dns:ptr:usage() { echo "<hgd:#>"; }
function dns:ptr() {
    core:import hgd

    local -i e=${CODE_DEFAULT?}
    if [ $# -eq 1 ]; then
        local -a ips
        ips=( $(:hgd:resolve ${1}) )
        if [ $? -eq 0 ]; then
            local ip
            for ip in ${ips[@]}; do
                cpf '%{@ip:%-32s}' ${ip}
                local -i ee=${CODE_FAILURE}
                arecord=$(dig +short -x ${ip}|grep -oE '[-a-z0-9\.]+')
                if [ ${PIPESTATUS[0]} -eq 0 ]; then
                    ipconfirm=$(dig +short ${arecord})
                    if [ $? -eq 0 ]; then
                        if [ "${ipconfirm}" == "${ip}" ]; then
                            #. Remove the last DNS dot
                            theme HAS_PASSED "${arecord%.}"
                            ee=${CODE_SUCCESS}
                        else
                            theme HAS_FAILED "A Record Mismatch"
                        fi
                    else
                        theme HAS_FAILED "No A Record"
                    fi
                else
                    theme HAS_WARNED "No PTR Record"
                fi
            done
            #cat x|while read line; do echo -ne ${line}...; nc -z -w1 $line 22; [ $? -eq 0 ] && echo UP || echo DOWN; done
            e=${CODE_SUCCESS}
        fi
    fi

    return $e
}

function :dns:subdomains() {
    local -i e=${CODE_FAILURE}

    if [ $# -eq 1 ]; then
        local tldid=$1
        local fN=${SITE_ETC}/subdom-${tldid}.conf
        if [ -r ${fN} ]; then
            cat ${fN} && e=${CODE_SUCCESS}
        else
            core:raise EXCEPTION_BAD_FN_CALL "No input file found for TLDID"
        fi
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}

function dns:tldids() {
    local -i e=${CODE_DEFAULT}

    if [ $# -eq 0 ]; then
        for tldid in ${!USER_TLDS[@]}; do
            cpf "%{@tldid:%s}: %{@host:%s}\n" ${tldid} ${USER_TLDS[${tldid}]}
        done
        e=${CODE_SUCCESS}
    fi

    return $e
}

function dns:subdomains:usage() { echo -n "-T|--tldid <tldid>"; }
function dns:subdomains() {
    local -i e=${CODE_DEFAULT}

    local tldid=${g_TLDID?}
    if [ $# -eq 0 -a ${#tldid} -gt 0 ]; then
        local fN=${SITE_ETC}/subdom-${tldid}.conf
        local tld=${USER_TLDS[${tldid}]}
        if [ -f ${fN} ]; then
            :dns:subdomains ${tldid} | column -t
        else
            theme HAS_FAILED "Missing \`${tldid}' subdomain configuration file"
        fi
        return $?
    fi

    return $e
}

#. }=-
