{"name":"Site","tagline":"Site is a modular framework for system administration, 99% native bash","body":"# OVERVIEW\r\n**MISSION STATEMENT**: _To simplify group scripting, reporting and automation tasks for large teams of system engineers_\r\n\r\nSite is written for system administrators, system engineers, devOps, or automation engineers.  It is a superset of bash, and structured to scale with your scripting requirements.\r\n\r\nSite is broken up into two main chunks:\r\n\r\n1. The bits that we write: the *site engine* (`lib/libsite`), and *core modules* `module/*`\r\n2. The bits that you write: *user modules* (`profile/${PROFILE}/module/*`)\r\n\r\nYou can configure site in two places:\r\n\r\n1. `profile/${PROFILE}/etc/site.conf` - configuration specific to *your organization*\r\n2. `~/.siterc` - configuration specific to *you*\r\n\r\n\r\n# REQUIREMENTS\r\n\r\n1. Core Requirements\r\n    * You need bash v4.0+\r\n    * You need gnu grep v2.0+ (probably)\r\n2. Additional Requirements\r\n    * The site modules will themselves check for any python, ruby, or perl module you need for that particular module.\r\n\r\n\r\n# INSTALLATION\r\n\r\n1. Clone It\r\n \r\n    ```bash\r\n    cd ~/\r\n    git clone https://github.com/nima/site.git\r\n    cd site\r\n    ```\r\n2. Set up yout new `PROFILE`\r\n \r\n    ```bash\r\n    export PROFILE=MYCOMPANY \r\n    mkdir -p profile/${PROFILE}/etc/\r\n    mkdir -p profile/${PROFILE}/module/\r\n    cp share/examples/site.conf.eg profile/${PROFILE}/etc/\r\n    cp share/examples/siterc.eg ~/.siterc\r\n    ```\r\n3. Install\r\n\r\n    ```bash\r\n    make install\r\n    ```\r\n\r\n## Filesystem Layout\r\nSite is designed to be run by your local user; it is designed to be installed on your desktop machine, and it will communicate with your hosts remotely.  You should never need to install site on a server.\r\n\r\n### Site will not crap all over your filesystem or home directory\r\nHere are the only files that will exist outside of `${SITE_SCM}` (where you cloned site to):\r\n\r\n* `~/.site/`\r\n* `~/.siterc`\r\n* `~/.secrets`\r\n\r\nThe installer installs everything required monolithically under `~/.site/`, and even that is just a set of symbolic links pointing back to various folders within `${SITE_SCM}`.\r\n\r\nThe `~/.siterc` is where you can store configuration overrides for you particular user, and `~/.secrets` is a GPG-encrypted file where you cam store all your passwords.  Site will provide you with the necessary high-level tools to create, edit, and read to and from this file, so you don't have to invoke GPG commands directly.\r\n\r\n### Site can be uninstalled as easily as it can be installed\r\nTo uninstall, simply run `make uninstall`, and if you want to delete all downloaded third-party software as well, then run `make purge`.\r\n\r\n### Site doesn't expect your bash profile to be changed\r\nInstead, you ever need to tell it to use a different executable, simply do so via `~/.siterc`; for example:\r\n\r\n```bash\r\nfunction grep() { /usr/local/bin/grep \"$@\"; return $?; }\r\n```\r\nThat means that you do not need to change your `PATH` to accomodate it, and the only environment variable that site cares (deeply) about, is `PROFILE`.\r\n\r\n\r\n# PHILOSOPHY\r\nInstead of hardcoding tediously long and complex commands over and over again in various scripts and various places, implement them once, and implement them well.  That is all you need to do (as far as scripting habits go), and you can start using site (almost) seamlessly.\r\n\r\nAll you have to do is to break up your scripts into small, single-purpose *functions*, and then group them contextually into *modules*.  Of course you don't have to break your scripts up at all, but if you want to reuse any part of that script, the this is the best way forward.\r\n\r\n## Simplicity\r\nSite is simple to use; and most UI concerns are automatically accounted for, simply as a result of you writing your code within the framework.\r\n\r\nFor example, if you implement a function called `say:hello()` in `~/.site/profile/module/say`, you will get basic usage for free:\r\n\r\n```\r\n% site\r\nUsing /bin/bash 4.2.37(1)-release (export SITE_SHELL to override)\r\n\r\nusage4nima@SITE01\r\n    site say:1/0; A module that greets the world\r\n    ...\r\n%\r\n```\r\n\r\nNow that we know of the `say` module:\r\n```\r\n% site say\r\nUsing /bin/bash 4.2.37(1)-release (export SITE_SHELL to override)\r\n\r\nusage4nima@SITE01 say\r\n    site say hello {no-args}\r\n%\r\n```\r\n\r\nAnd now, that we know how to use it:\r\n```\r\n% site say hello\r\nHello World!\r\n%\r\n```\r\n\r\n## Verifiability\r\nScripts change over time, and so unit-testing is as relevant to systems scripts as it is to any piece of software.  Site comes with a flexible unit-testing module. This module reads everything it needs to know about every function test from a unit-testing configuration file, and warns you for functions that are missing unit-test data.\r\n\r\n```\r\n% site unit test\r\n```\r\n\r\n## Security Measures\r\nSite doesn't expect to be run as root; in fact it should _never_ be run as root.  It will never _require_ root access on your desktop machine - which is the only place it needs to be installed.\r\n\r\nIt could however need root access when communicating tasks to remote hosts, and in that event it will resort to your `~/.secrets` file.\r\n\r\nAll your passwords should be stored in `~/.secrets`, which is gnugp-encrypted with your user's public key; site will ask `gpg-agent` (or you) whenever it needs access to it.\r\n\r\nYou can store any password you like in there, even remote host sudo passwords.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}