{"name":"site","tagline":"Modular shell-scripting framework - 99% native bash, 1% phat!","body":"[![Build Status](https://travis-ci.org/nima/site.png?branch=stable)](https://travis-ci.org/nima/site)\r\n[![views](https://sourcegraph.com/api/repos/github.com/nima/site/counters/views.png)](https://sourcegraph.com/github.com/nima/site)\r\n[![authors](https://sourcegraph.com/api/repos/github.com/nima/site/badges/authors.png)](https://sourcegraph.com/github.com/nima/site)\r\n[![status](https://sourcegraph.com/api/repos/github.com/nima/site/badges/status.png)](https://sourcegraph.com/github.com/nima/site)\r\n\r\n# OVERVIEW\r\n**MISSION STATEMENT**: _To simplify and standardize collaborative scripting, reporting and automation tasks_\r\n\r\n**TARGET AUDIENCE**: _System Administrators, System Engineers, DevOps, System Reliability Engineers (SRE), Test Engineers_\r\n\r\nSite is written for system administrators, system engineers, devOps, or automation engineers.  It is a superset of bash, and structured to scale with your scripting requirements.\r\n\r\n## News\r\n<a class=\"twitter-timeline\" href=\"https://twitter.com/SiteSysOpsUtil\" data-widget-id=\"435631222664880128\">Tweets by @SiteSysOpsUtil</a>\r\n<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\"://platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script>\r\n\r\n## The Code\r\nSite is broken up into two main chunks:\r\n\r\n1. The bits that we write:\r\n    * the *site engine*: `libsite.sh`\r\n    * the *core modules*: `module/*`\r\n\r\n2. The bits that you write:\r\n    * the *user modules*: `~/.site/module/*`\r\n\r\n## The Config\r\nSite is configured in two places:\r\n\r\n1. One for *your organization*: `~/.site/etc/site.conf`\r\n2. One just for *you*: `~/.siterc`\r\n\r\n---\r\n# REQUIREMENTS\r\n\r\n## Core Requirements\r\n\r\nYou need bash v4.0+ to start with, but this is easier than you might think:  if your version of bash is older, simply compile a newer one locally in you home directory, and set the environment variable `SITE_SHELL` to point to it.  You don't even need to do this in your user profile, simply place it (and any other overrides) into your `~/.siterc` or ~/.site/etc/site.conf`.  More on those files later!\r\n\r\nYou also need a handful of utilities and interpreters such as gnu grep, gawk, gsed, nc, socat, etc. The full list is covered in the installation section bellow.\r\n\r\n## Additional Requirements\r\n\r\nThe site modules will themselves check for any python, ruby, or perl module you need for that particular module.\r\n\r\n\r\n---\r\n# INSTALLATION\r\n0. Clone It\r\n\r\n    ```bash\r\n    cd ~/\r\n    git clone https://github.com/nima/site.git\r\n    git checkout stable\r\n    cd site\r\n    ```\r\n1. Install prerequisite software\r\n\r\n    Do what [Travis](https://travis-ci.org/nima/site/builds) does:\r\n    ```bash\r\n    sed -ne '/^before_install:/,/^$/{/^ /p}' .travis.yml\r\n    ```\r\n2. Set up yout new `PROFILE`\r\n\r\n    ```bash\r\n    export PROFILE=MYCOMPANY\r\n    mkdir -p profile/${PROFILE}/etc/\r\n    mkdir -p profile/${PROFILE}/module/\r\n    cp share/examples/site.conf.eg profile/${PROFILE}/etc/\r\n    cp share/examples/siterc.eg ~/.siterc\r\n    ```\r\n3. Install\r\n\r\n    ```bash\r\n    make install\r\n    ```\r\n\r\n## Filesystem Layout\r\nSite is designed to be run by your local user; it is designed to be installed on your desktop machine, and it will communicate with your hosts remotely.  You should never need to install site on a server.\r\n\r\n### Site will not crap all over your filesystem or home directory\r\nHere are the only files that will exist outside of `${SITE_SCM}` (where you cloned site to):\r\n\r\n    * `~/bin/site`\r\n    * `~/.site/`\r\n    * `~/.siterc`\r\n    * `~/.secrets`\r\n\r\nThe installer installs everything required monolithically under `~/.site/`, and even that is just a set of symbolic links pointing back to various folders within `${SITE_SCM}`.\r\n\r\nThe `~/.siterc` is where you can store configuration overrides for you particular user, and `~/.secrets` is a GPG-encrypted file where you cam store all your passwords.  Site will provide you with the necessary high-level tools to create, edit, and read to and from this file, so you don't have to invoke GPG commands directly.\r\n\r\n### Site can be uninstalled as easily as it can be installed\r\nTo uninstall, simply run `make uninstall`, and if you want to delete all downloaded third-party software as well, then run `make purge`.\r\n\r\n### Site doesn't expect your bash profile to be changed\r\nInstead, you ever need to tell it to use a different executable, simply do so via `~/.siterc`; for example:\r\n\r\n```bash\r\nfunction grep() { /usr/local/bin/grep \"$@\"; return $?; }\r\n```\r\nThat means that you do not need to change your `PATH` to accomodate it, and the only environment variable that site cares (deeply) about, is `PROFILE`.\r\n\r\n---\r\n# HELP\r\n\r\n## Asking for Help (Support)\r\nIf you need help, please feel free to contact support on `github at nima dot id dot au`.\r\n\r\n## Offering to Help (Contribustion)\r\nWe're always looking for users and developers.  Simply telling us about your experience installing and using site is of great value to us.  If you want to get your hands dirty, well send us a pull request!  Remember site is modular, and there is no reason why you couldn't add your own modules to site.  If those modules are generic and could be of use to other users, we would love to hear from you!\r\n\r\n---\r\n# PHILOSOPHY\r\nInstead of hardcoding tediously long and complex commands over and over again in various scripts and various places, implement them once, and implement them well.  That is all you need to do (as far as scripting habits go), and you can start using site (almost) seamlessly.\r\n\r\nAll you have to do is to break up your scripts into small, single-purpose *functions*, and then group them contextually into *modules*.  Of course you don't have to break your scripts up at all, but if you want to reuse any part of that script, the this is the best way forward.\r\n\r\n## Simplicity\r\nSite is simple to use; and most UI concerns are automatically accounted for, simply as a result of you writing your code within the framework.\r\n\r\nFor example, if you implement a function called `say:hello()` in `~/.site/profile/module/say`, you will get basic usage for free:\r\n\r\n```\r\n% site\r\nUsing /bin/bash 4.2.37(1)-release (export SITE_SHELL to override)\r\n\r\nusage4nima@SITE01\r\n    site say:1/0; A module that greets the world\r\n    ...\r\n%\r\n```\r\n\r\nNow that we know of the `say` module:\r\n```\r\n% site say\r\nUsing /bin/bash 4.2.37(1)-release (export SITE_SHELL to override)\r\n\r\nusage4nima@SITE01 say\r\n    site say hello {no-args}\r\n%\r\n```\r\n\r\nAnd now, that we know how to use it:\r\n```\r\n% site say hello\r\nHello World!\r\n%\r\n```\r\n\r\n## Verifiability\r\n### Unit Testing Framework\r\nScripts change over time, and so unit-testing is as relevant to systems scripts as it is to any piece of software.  Site comes with a flexible unit-testing module. This module reads everything it needs to know about every function test from a unit-testing configuration file, and warns you for functions that are missing unit-test data.\r\n\r\n```\r\n% site unit test\r\n```\r\n\r\n### Bash Traceback\r\nThat's right, we have a traceback so you can debug your scripts (site user modules).  Of course bash doesn't provide such functionality natively, so we had to be creative.\r\n\r\n## Security Measures\r\nSite doesn't expect to be run as root; in fact it should _never_ be run as root.  It will never _require_ root access on your desktop machine - which is the only place it needs to be installed.\r\n\r\nIt could however need root access when communicating tasks to remote hosts, and in that event it will resort to your `~/.secrets` file.\r\n\r\nAll your passwords should be stored in `~/.secrets`, which is gnugp-encrypted with your user's public key; site will ask `gpg-agent` (or you) whenever it needs access to it.\r\n\r\nYou can store any password you like in there, even remote host sudo passwords.\r\n\r\n---\r\n\r\n###### TAGS: `abstraction`, `automation`, `reporting`, `verifiability`, `standards`, `monitoring`, `unit-testing`, `bash`, `ssh`, `tmux`, `netgroup`, `hosts`, `users`, `ldap`, `mongo`, `softlayer`, `gnupg`, `remote-execution`, `sudo`, `tmux`, `shell-scripting`, `traceback`, `ldif`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}