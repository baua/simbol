# vim: tw=0:ts=4:sw=4:et:ft=bash

:<<[core:docstring]
Core Unit-Testing Module
[core:docstring]

#. -={
#. Pre/post test scaffolding -={
oneTimeSetUp() {
    cpf "%{@comment:#############################################################################}\n"
    cpf "%{@comment:Set-up...}"

    declare -gi tid=0

    declare -g oD="${SHUNIT_TMPDIR}"
    mkdir -p "${oD}"

    declare -g stdoutF="${oD}/stdout"
    declare -g stderrF="${oD}/stderr"

    theme HAS_PASSED
}

oneTimeTearDown() {
    cpf "%{@comment:Tear-down...}"

    rm -rf "${oD?}"

    theme HAS_PASSED
}

setUp() {
    : ${tid?}
    ((tid++))
    cpf "%{@comment:Test} %{y:#${tid}: }"
}

tearDown() {
    :
}
#. }=-
#. Unit-testing coverage test -={
declare -g -A g_MODULES
function testCoverage() {
    local profile=${g_RUNTIME_PROFILE?}
    local module=${g_RUNTIME_MODULE?}
    local script=${g_RUNTIME_SCRIPT?}
    local -i e=0
    local -i t=0
    local -i p=0
    local -i s=0

        #[private]='^function ::%s:([a-z0-9_]+:)?[a-z0-9_]+\(\)'
        #[internal]='^function :%s:([a-z0-9_]+:)?[a-z0-9_]+\(\)'
    local -A fnregexes=(
        [private]='^function ::%s:[a-z0-9_]+\(\)'
        [internal]='^function :%s:[a-z0-9_]+\(\)'
        [public]='^function %s:[a-z0-9_]+\(\)'
    )

    if [ -d ${SITE}/lib/${profile} ]; then
        cd ${SITE}/lib/${profile}
        local context
        local blacklisted
        blacklisted="$(awk -F\| "NF==2&&\$1~/^#${profile}$/&&\$2~/^${module}$/{print\"BLACKLISTED\"}" ${SITE_UNITDATA?})"
        if [ "${blacklisted}" != "BLACKLISTED" ]; then
            cpf "%{@profile:${profile}}: %{!module:${module}} %{r:-=[}\n"
            for context in ${!fnregexes[@]}; do
                local regex=$(printf "${fnregexes[${context}]}" ${module})
                local -i count=$(grep -cE "${regex}" ${module})
                cpf "    %{!module:${module}}: %{m:${context}}: %{@int:${count}}\n"
                if [ $count -gt 0 ]; then
                    local -a fns=(
                        $(grep -oE "${regex}" ${module}|sed -e "s/^function :\{0,2\}${module}:\(.*\)()/\1/")
                    )
                    for fn in ${fns[@]}; do
                        local utf="test${profile^}${module^}${fn^}${context^}"
                        utf=${utf/:/} #. Remove the colon for shunit2
                        local -i has_static_test=${FALSE}
                        if [ "$(type -t ${utf})" == 'function' ]; then
                            cpf "      %{@comment:|___} %{!function:${module}:${fn}}:static %{@fn:${utf}}..."
                            theme HAS_PASSED "Static"
                            has_static_test=${TRUE}
                        fi
                        cpf "      %{@comment:|___} %{!function:${module}:${fn}}:dynamic; %{@fn:${utf}}..."
                        blacklisted="$(awk -F\| "\$1~/^#${profile}$/&&\$2~/^${module}$/&&\$3~/^${fn}$/&&\$4~/^${context}$/{print\"BLACKLISTED\"}" ${SITE_UNITDATA?})"
                        if [ "${blacklisted}" != "BLACKLISTED" ]; then
                            local input
                            input="$(awk -F\| "\$1~/^${profile}$/&&\$2~/^${module}$/&&\$3~/^${fn}$/&&\$4~/^${context}$/{print\$0}" ${SITE_UNITDATA?})"
                            if [ -n "${input}" ]; then
                                cat <<!SCRIPT > ${script}
#!/bin/bash
#. Script    : ${script}
#. Profile   : ${profile}
#. Module    : ${module}
#. Generated : $(date)
!SCRIPT
                                local -i i=0
                                local line
                                while read line; do
                                    ((i++))
                                    local ffn=
                                    case ${context} in
                                        private)  ffn+=::;;
                                        internal) ffn+=:;;
                                    esac
                                    ffn+=${prefix}${module}:${fn}
                                    if [ "${context}" == "public" ]; then
                                        cat <<!SCRIPT >> ${script}
#. Dynamic function ${i} for ${utf} {no-args} [ site:${profile}:${module}.${fn}() ] -={

function ${utf}Dyn${i}NoArgs() {
    #. Check if the function called without any arguments returns CODE_DEFAULT, or otherwise CODE_SUCCESS
    #. TODO: At the moment, no way to tell automatically if its CODE_DEFAULT or CODE_SUCCESS we expect
    #. TODO: so this either/or approach will have to do.
    core:softimport ${module}
    cpf " %{@comment ___site} %{!function:${module}:${fn}} {no-args} "
    if assertEquals "import ${module}" ${CODE_SUCCESS} \$?; then
        ${ffn} >/dev/null 2>&1
        ((e=\$? % ${CODE_DEFAULT})) #. See why above
        if assertEquals "exit code" ${CODE_SUCCESS} \${e}; then
            theme HAS_PASSED
        else
            theme HAS_FAILED "Expected return code ${CODE_DEFAULT} or ${CODE_SUCCESS}, but not \${e}"
        fi
    fi
}
#. }=-
!SCRIPT
                                    fi
                                    cat <<!SCRIPT >> ${script}
#. Dynamic function ${i} for ${utf} [ site:${profile}:${module}.${fn}() ] -={

function ${utf}Dyn${i}() {
    IFS='|' read profile module fn context stdin arguments stdout stderr exitcode site <<< '${line}'
    : \${exitcode:=-1}

    cpf " %{@comment ___site} %{!function:${module}:${fn}} \${arguments//%/%%} %{r:-=[} "
        cpf "%{g:\${stdout:--}} %{y:/} %{r:\${stderr:--}} %{y:/} ";
        [ \${exitcode} -eq 0 ] && cpf "%{g:0}" || cpf "%{r:\${exitcode}}"
    cpf " %{r:]=-}"

    if [ -z "\${site}" -o "\${site}" == "${PROFILE}" ]; then
        cpf
        core:softimport ${module}
        if assertEquals "import ${module}" ${CODE_SUCCESS} \$?; then
            if assertEquals "function" \$(type -t "${ffn}"); then
                local -i e
                if [ "${context}" == "public" ]; then
                    if [ -z "\${stdin}" ]; then
                        #. We go via the outer core wrapper to ensure user short
                        #. and long options are resovled properly for public functions.
                        core:wrapper ${module} ${fn} \${arguments} >\${stdoutF?} 2>\${stderrF?}
                    else
                        echo "\${stdin}" | core:wrapper ${module} ${fn} \${arguments} >\${stdoutF?} 2>\${stderrF?}
                        e=\$?
                    fi
                else
                    if [ -z "\${stdin}" ]; then
                        #. No need to worry about such -a|--argument style options
                        #. for non-public function calls as they do not support
                        #. this, only public functions do, so we can call the
                        #. inner functions directly.
                        ${ffn} \${arguments} >\${stdoutF?} 2>\${stderrF?}
                    else
                        echo "\${stdin}" | ${ffn} \${arguments} >\${stdoutF?} 2>\${stderrF?}
                        e=\$?
                    fi
                fi
                e=\$?

                if assertEquals "exit code" \${exitcode} \$e; then
                    if [ -n "\${stdout?}" ]; then
                        local stdout_ok=0
                        if [ \${#stdout} -eq 32 -a -z "\${stdout//[0-9a-f]/}" ]; then
                            local md5=\$(md5sum \${stdoutF?}|awk '{print\$1}')
                            if [ "\${md5}" == "\${stdout?}" ]; then
                                stdout_ok=1
                            else
                                echo "    \${md5}" vs "\${stdout?}"
                            fi
                        fi
                        if [ \${stdout_ok} -eq 0 ]; then
                            read -r stdout_line <\${stdoutF?}
                            assertEquals "\${stdout?}" "\${stdout_line?}"
                        fi
                    fi

                    if [ -n "\${stderr}" ]; then
                        local stderr_ok=1
                        if [ \${#stderr} -eq 32 -a -z "\${stderr//[0-9a-f]/}" ]; then
                            local md5=\$(md5sum \${stderrF}|awk '{print\$1}')
                            if [ "\${md5}" == "\${stderr}" ]; then
                                stderr_ok=1
                            else
                                echo "    \${md5}" vs "\${stdout?}"
                            fi
                        fi
                        if [ \${stderr_ok} -eq 0 ]; then
                            read -r stderr_line <\${stderrF?}
                            if assertEquals "\${stderr?}" "\${stderr_line?}"; then
                                stderr_ok=0
                            else
                                cpf "    %{@warn:WARNING}: Unexpected output to stderr [%{@warn:%s}]\n" "\${stderr}"
                            fi
                        fi
                    fi

                else
                    echo "Exiting early."
                fi
            else
                echo "Exiting early."
            fi
        else
            echo "Exiting early."
        fi
    else
        theme HAS_WARNED "Skipped (\${site})"
    fi
}
#. }=-
!SCRIPT
                                done <<< "${input}"
                                theme HAS_PASSED "Dynamic:$i"
                                ((p++))
                            else
                                if [ ${has_static_test} -eq ${TRUE} ]; then
                                    theme HAS_WARNED "Has Static"
                                    ((s++))
                                else
                                    theme HAS_FAILED "Undefined"
                                    ((e++))
                                fi
                            fi
                        else
                            theme HAS_WARNED "Blacklisted"
                            ((s++))
                        fi
                        ((t++))
                    done
                fi
            done
            cpf "%{r:]=-} %{@profile:${profile}}: %{!module:${module}}\n"
        else
            cpf "%{@profile:${profile}}: %{!module:${module}} %{r:-=[} %{@warn:BLACKLISTED} %{r:]=-} %{@profile:${profile}}: %{!module:${module}}\n"
        fi
        cd ${OLDPWD}
        cpf
    fi

    assertEquals "of the $t unit-tests, $p passed, $s skipped, and $e missing; i.e.," $((t-s)) $p
}
#. }=-
#. Unit-test `site' module function -={

function ::unit:prime() {
    local -i e=${CODE_DEFAULT?}

    local valid=0
    [ $# -ne 0 ] || valid=1

    for profile in core ${PROFILE}; do
        if [ -d ${SITE}/lib/${profile} ]; then
            cd ${SITE}/lib/${profile}
            local module
            for module in *; do
                if [ ${#g_MODULES[@]} -eq 0 -o ${g_MODULES[${module}]--1} -eq 1 ]; then
                    cpf "%{@comment:${profile}.${module}.STATIC unit-testing} %{r:-=[}\n";
                    (
                        export g_RUNTIME_PROFILE=${profile}
                        export g_RUNTIME_MODULE=${module}
                        export g_RUNTIME_SCRIPT=${SITE_CACHE?}/unittest-${module}.sh
                        SHUNIT_PARENT=${SITE_LIB_CORE}/unit source ${SHUNIT2}
                    )
                    e=$?
                    if [ ${e} -eq 0 ]; then
                        cpf "%{@comment:exit}:%{g:${e}} "
                    else
                        cpf "%{@comment:exit}:%{r:${e}} "
                    fi
                    cpf "%{r:]=-}\n"

                    cpf "%{@comment:${profile}.${module}.DYNAMIC} %{r:-=[}\n";
                    local script=${SITE_CACHE?}/unittest-${module}.sh
                    if [ -r "${script}" ]; then
                        (
                            export g_RUNTIME_SCRIPT="${script}"
                            source "${g_RUNTIME_SCRIPT}"
                            SHUNIT_PARENT="${g_RUNTIME_SCRIPT}" source "${SHUNIT2}"
                        )
                        e=$?

                        if [ ${e} -eq 0 ]; then
                            cpf "%{@comment:exit}:%{g:PASSED(${e})} "
                        else
                            cpf "%{@comment:exit}:%{r:FAILED(${e})} "
                        fi
                    else
                        cpf "%{@comment:exit}:%{y:SKIPPED} "
                    fi
                    cpf "%{r:]=-}\n"
                fi
            done
        fi
    done

    return $e
}

function unit:test:usage() { echo "[<module> [<module> [...]]]"; }
function unit:test() {
    local -i e=${CODE_DEFAULT?}
    local valid=1

    local module
    if [ $# -gt 0 ]; then
        for module in ${@}; do
            if core:softimport ${module}; then
                g_MODULES[${module}]=1
            else
                g_MODULES[${module}]=0
                valid=0
            fi
        done
    fi

    if [ ${valid} -eq 1 ]; then
        if [ -e "${SHUNIT2}" ]; then
            cpf "%{@comment:#############################################################################}\n"
            #. Only regenerate the script if it doesn't exist, or if it is
            #. older than the input unittest csv file.
            ::unit:prime
            local -i e=$?

            cpf "%{@comment:#############################################################################}\n"
            cpf "Unit-testing overal result..."
            [ $e -eq 0 ] && theme HAS_PASSED || theme HAS_FAILED
        else
            theme ERR_USAGE "${SHUNIT2} is missing"
            e=${CODE_FAILURE}
        fi
    else
        e=${CODE_FAILURE}
    fi

    return $e
}
#. }=-
#. }=-
