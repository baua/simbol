# vim: tw=0:ts=4:sw=4:et:ft=bash

:<<[core:docstring]
Core utilities module
[core:docstring]

: ${USER_GPG_ID:=UNSET}
g_GPG_KEY_PATH=${HOME}/.gnupg/${USER_USERNAME}.${PROFILE}.${USER_GPG_ID}

#. GPG -={
function :util:gpgkeygen() {
    : ${PROFILE?}
    : ${USER_USERNAME?}
    : ${USER_FULLNAME?}
    : ${USER_EMAIL?}
    core:requires gpg2

    local -i e=${CODE_FAILURE}

    mkdir -p ~/.gnupg
    chmod 700 ~/.gnupg

    cat <<! >${g_GPG_KEY_PATH}.conf
Key-Type: RSA
Key-Length: 3072
Subkey-Type: ELG-E
Subkey-Length: 3072
Name-Real: ${USER_FULLNAME?}
Name-Comment: ${USER_USERNAME?} profile key generated via site
Name-Email: ${USER_EMAIL?}
Expire-Date: 0
%ask-passphrase
%pubring ${g_GPG_KEY_PATH}.pub
%secring ${g_GPG_KEY_PATH}.sec
%commit
!
    cpf "   * Generate some entropy via %{@code:ls -R /}..."
    ( ls -R / >/dev/null 2>&1 )&
    theme HAS_PASSED "Backgrounded"

    local tmp_GPG_KEY_PATH=${g_GPG_KEY_PATH}

    gpg2 -q --batch --gen-key ${g_GPG_KEY_PATH}.conf 2>&1|sed -e '/^$/d' -e 's/^/   * /'
    if [ $? -eq 0 ]; then
        if [ -e ${g_GPG_KEY_PATH}.sec -a -e ${g_GPG_KEY_PATH}.pub ]; then
            export USER_GPG_ID=0x$(
                gpg2 --no-default-keyring \
                    --secret-keyring ${g_GPG_KEY_PATH}.sec\
                    --keyring ${g_GPG_KEY_PATH}.pub\
                    --list-secret-keys | awk -F '[ /]+' '$1~/^sec/{print$3}'
            )
            export g_GPG_KEY_PATH=${HOME}/.gnupg/${USER_USERNAME}.${PROFILE}.${USER_GPG_ID}
            mv ${tmp_GPG_KEY_PATH}.sec ${g_GPG_KEY_PATH}.sec
            mv ${tmp_GPG_KEY_PATH}.pub ${g_GPG_KEY_PATH}.pub
            if gpg -q --batch --import ${g_GPG_KEY_PATH}.sec; then
                if gpg -q --batch --import ${g_GPG_KEY_PATH}.pub; then
                    e=${CODE_SUCCESS}
                    cpf "   * Now set %{@code:USER_GPG_ID=\"${USER_GPG_ID}\"} in %{@path:~/.siterc}\n"
                fi
            fi
        fi
    fi

    rm -f ${tmp_GPG_KEY_PATH}.conf

    return $e
}

function util:gpg:usage() { echo "info|create | delete <gpg-key>"; }
function util:gpg() {
    : ${PROFILE?}
    : ${USER_USERNAME?}
    : ${USER_EMAIL?}
    core:requires gpg2

    local -i e=${CODE_DEFAULT}

    case $#:$1 in
        1:info)
            cpf "Examining %{@path:${g_GPG_KEY_PATH}}..."
            if [ "${USER_GPG_ID}" != "UNSET" ]; then
                if [ -e ${g_GPG_KEY_PATH}.sec -a -e ${g_GPG_KEY_PATH}.pub ]; then
                    gpg2 --no-default-keyring \
                        --secret-keyring ${g_GPG_KEY_PATH}.sec\
                        --keyring ${g_GPG_KEY_PATH}.pub\
                        --list-secret-keys >/dev/null 2>&1
                    if [ $? -eq 0 ]; then
                        theme HAS_PASSED
                        e=${CODE_SUCCESS}
                    else
                        theme HAS_FAILED
                        e=${CODE_FAILURE}
                    fi
                else
                    theme HAS_FAILED
                    e=${CODE_FAILURE}
                fi
            else
                theme HAS_FAILED "You have not yet set your GPG key"
                e=${CODE_FAILURE}
            fi
        ;;

        1:create)
            if [ ${USER_GPG_ID} == "UNSET" ]; then
                cpf "#. Generating an RSA/ELG-E GPG key for you (%{@user:%s}@%{@profile:%s}) %{r:%s}\n" "${USER_USERNAME}" "${PROFILE}" "-=["
                if :util:gpgkeygen; then
                    cpf "#. %{r:%s} GPG Key Generation..." "]=-"
                    theme HAS_PASSED "${g_GPG_KEY_PATH}.*"
                    util:gpg info
                    e=${CODE_SUCCESS}
                else
                    cpf "#. %{r:%s} GPG Key Generation..." "]=-"
                    theme HAS_FAILED
                    e=${CODE_FAILURE}
                fi
            else
                cpf "You already have your key for this profile:\n"
                util:gpg info
                e=${CODE_FAILURE}
            fi
        ;;

        2:delete)
            cpf "%{@comment:%s}\n" "#. First remove the secret keys..."
            local gpgkid=$2
            local -a secretkeys=(
                $(
                    gpg --list-secret-keys --with-colons --fingerprint |
                        sed -n 's/^fpr:::::::::\([[:alnum:]]\+\):/\1/p'
                )
            )
            for sk in ${secretkeys[@]}; do
                cpf "gpg --batch --yes --delete-secret-key ${sk}\n"
            done

            cpf "%{@comment:%s}\n" "#. Then the public...\n"
            echo gpg -q --batch --yes --delete-key ${gpgkid}

            cpf "%{@comment:%s}\n" "#. Then the files...\n"
            echo rm -f ${HOME}/.gnupg/${USER_USERNAME}.${PROFILE}.${gpgkid}.pub
            echo rm -f ${HOME}/.gnupg/${USER_USERNAME}.${PROFILE}.${gpgkid}.sec

            e=${CODE_SUCCESS}
        ;;
    esac

    return $e
}
#. }=-

g_VAULT=${HOME}/.secrets
g_VAULT_TMP=${HOME}/.vault/killme
g_VAULT_BACKUP=${HOME}/.vault/vault-$(date +'%Y%m%d')
#. Secrets -={
#function ::util:secrets:draw() {
#    ${HOME}/bin/gpg2png $1
#    cp $1.png ~/vault.png
#    cp $1-qr.png ~/g_VAULT-QR.PNG
#    img2txt ~/vault.png ~/g_VAULT-QR.PNG
#}

function ::util:secrets:cleanup() {
    for vault in ${g_VAULTS[@]}; do
        test ! -f ${vault} || chmod 600 ${vault}
    done
    mkdir -p $(dirname ${g_VAULT_BACKUP})
    chmod 700 $(dirname ${g_VAULT_BACKUP})
    test ! -f ${g_VAULT_BACKUP} || chmod 600 ${g_VAULT_BACKUP}
    find ${g_VAULT_TMP} -type f -exec shred -fuz {} \;
    rm -f ${g_VAULT_TMP}.timestamp
    #rmdir $(dirname ${g_VAULT_TMP})
}

function :util:secrets() {
    local -i e=${CODE_FAILURE}

    if [ $# -eq 1 ]; then
        ${SITE_LIBEXEC_CORE}/secret $1
        e=$?
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}

function util:secrets:usage() { echo "edit|list"; }
function util:secrets() {
    local -i e=${CODE_DEFAULT}
    trap ::util:secrets:cleanup INT

    core:requires gpg

    cpf "Checking your GPG id..."
    if [ "${USER_GPG_ID}" != "UNSET" ]; then
        theme HAS_PASSED ${USER_GPG_ID}

        if [ ! -f ${g_VAULT} ]; then
            cpf "Generating blank secrets file..."
            echo "XXX" | gpg -q --batch --use-agent -r ${USER_GPG_ID} -e -a -o ${g_VAULT}
            theme HAS_PASSED ${g_VAULT}
        fi

        if [ $# -eq 1 ]; then
            case $1 in
                edit)
                    cpf "Checking for GPG keys..."
                    if [ -e ${g_GPG_KEY_PATH}.pub ]; then
                        theme HAS_PASSED

                        cpf "Decrypting secrets..."
                        mkdir -p $(dirname ${g_VAULT_TMP})
                        chmod 700 $(dirname ${g_VAULT_TMP})
                        gpg -q --batch --use-agent -d --default-key ${USER_GPG_ID} -o ${g_VAULT_TMP} ${g_VAULT}
                        e=$?
                        if [ $e -eq 0 ]; then
                            theme HAS_PASSED
                            touch ${g_VAULT_TMP}.timestamp
                            ${EDITOR:-vim} -n ${g_VAULT_TMP}
                            if [ ${g_VAULT_TMP} -nt ${g_VAULT_TMP}.timestamp ]; then
                                cpf "Encrypting secrets..."
                                #draw ${g_VAULT_TMP}
                                mv ${g_VAULT} ${g_VAULT_BACKUP}
                                gpg -q --batch --use-agent -r ${USER_GPG_ID} -e -a -o ${g_VAULT} ${g_VAULT_TMP}
                                e=$?
                                if [ $e -eq 0 ]; then
                                    theme HAS_PASSED
                                else
                                    theme HAS_FAILED "ENCRYPTION"
                                fi
                            fi
                        else
                            theme HAS_FAILED "DECRYPTION"
                        fi
                        ::util:secrets:cleanup
                    else
                        theme HAS_FAILED "Missing ${g_GPG_KEY_PATH}.pub"
                        e=${CODE_FAILURE}
                    fi
                ;;
                list)
                    local -a secrets=(
                        $(gpg -q --batch --use-agent -d -o - ${g_VAULT}|awk '$1!~/^[\t ]*#/{print$1}')
                    )
                    e=${PIPESTATUS[0]}
                    if [ $e -eq 0 ]; then
                        for secret in ${secrets[@]}; do
                            cpf "%{r:%s}\n" ${secret}
                        done
                    fi
                ;;
            esac
        elif [ $# -eq 2 ]; then
            case $1 in
                read)
                    local secret=$2
                    cpf "Checking for secret id %{r:%s}..." ${secret}
                    local -a secrets=(
                        $(gpg -q --batch --use-agent -d -o - ${g_VAULT}|awk '$1~/^\<'${secret}'\>/{print$1}')
                    )
                    e=${PIPESTATUS[0]}
                    if [ $e -eq 0 -a ${#secrets[@]} -eq 1 ]; then
                        theme HAS_PASSED "SECRET_KEY_VALID"
                    else
                        theme HAS_FAILED "NO_SUCH_SECRET_ID"
                    fi
                ;;
            esac
        fi
    else
        theme HAS_FAILED "USER_GPG_ID_UNDEFINED"
        e=${CODE_FAILURE}
    fi

    return $e
}
#. }=-

#. Timeout -={
#. Optional long help message
function util:timeout:help() {
    cat <<EOF

    [-t timeout] [-i interval] [-d delay] command
    Execute a command with a time-out.
    Upon time-out expiration SIGTERM (15) is sent to the process. If SIGTERM
    signal is blocked, then the subsequent SIGKILL (9) terminates it.

    -t timeout
        Number of seconds to wait for command completion.
        Default value: $DEFAULT_TIMEOUT seconds.

    -i interval
        Interval between checks if the process is still alive.
        Positive integer, default value: $DEFAULT_INTERVAL seconds.

    -d delay
        Delay between posting the SIGTERM signal and destroying the
        process by SIGKILL. Default value: $DEFAULT_DELAY seconds.

    Note that Bash does not support floating point arithmetic
    (sleep does), therefore all delay/time values must be integers.
EOF
}

function util:timeout:usage() { echo "[-t|--timeout <timeout>] [-i|--interval <interval>] [-d|--delay <delay>]"; }

function util:timeout:shflags() {
    # Timeout.
    local -i DEFAULT_TIMEOUT=9
    # Interval between checks if the process is still alive.
    local -i DEFAULT_INTERVAL=1
    # Delay between posting the SIGTERM signal and destroying the process by SIGKILL.
    local -i DEFAULT_DELAY=1

    cat <<!
integer timeout ${DEFAULT_TIMEOUT} <timeout> t
integer interval ${DEFAULT_INTERVAL} <interval> i
integer delay ${DEFAULT_DELAY} <delay> d
!
}

function util:timeout() {
    local -i e=${CODE_DEFAULT?}

    if [ $# -ge 1 ]; then
        e=${CODE_FAILURE}
        local -i delay=${FLAGS_delay?}; unset FLAGS_delay
        local -i timeout=${FLAGS_timeout?}; unset FLAGS_timeout
        local -i interval=${FLAGS_interval?}; unset FLAGS_interval
        (
            local -i t
            ((t = timeout))
            while ((t > 0)); do
                sleep ${interval}
                kill -0 $$ || exit 0
                ((t -= interval))
            done

            # Be nice, post SIGTERM first.
            # The 'exit 0' below will be executed if any preceeding command fails.
            kill -s SIGTERM $$ && kill -0 $$ || exit 0
            sleep $delay
            kill -s SIGKILL $$
        ) 2>/dev/null &

        exec "$@"
    fi

    return $e
}
#. }=-

#. Date -={
function :util:date:i2s() {
    if [ $# -eq 1 ]; then
        #. Convert seconds to datestamp
        date --utc --date "1970-01-01 $1 sec" "+%Y%m%d%H%M%S"
        #. FIXME: Mac OS X needs this line instead:
        #. FIXME: date -u -j "010112001970.$1" "+%Y%m%d%H%M%S"
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi
}

function :util:date:s2i() {
    if [ $# -eq 1 ]; then
        local YYYY=${1:0:4}
        local mm=${1:4:2}
        local dd=${1:6:2}
        local HH=${1:8:2}
        local MM=${1:10:2}
        local SS=${1:12:2}

        #. Convert datestamp to seconds
        date --utc --date "${YYYY}-${mm}-${dd} ${HH}:${MM}:${SS}" "+%s"
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi
}
#. }=-

#. Misc -={
function :util:listify() {
    if [ $# -gt 0 ]; then
        #. Method 1
        IFS=, read -a s <<< "$*"
        echo ${s[@]}
        return

        #. Method 2
        IFS=, read -a s <<< $*
        echo ${s}
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi
}

function :util:uniq() {
    if [ $# -gt 0 ]; then
        tr ' ' '\n' <<< "${@}" | sort -u | tr '\n' ' '
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi
}

function :util:dups() {
    local -i e=${CODE_FAILURE}

    if [ $# -eq 0 ]; then
        while read line; do
            echo ${line}
        done | sort -n | awk 'BEGIN{last=0};$1~/uidNumber/{if(last==$2){print$2};last=$2}' | sort -u
        e=${CODE_SUCCESS}
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi

    return $e
}

function :util:undelimit() {
    tr "${SITE_DELIM?}" "\n"
}

function :util:join() {
    #. Usage: array=( a b c ); :util:join $delim array
    if [ $# -eq 2 ]; then
        local IFS=$1
        eval "echo \"\${${2}[*]}\""
    else
        core:raise EXCEPTION_BAD_FN_CALL
    fi
}

function :util:is_int() {
    [[ $1 =~ ^-?[0-9]+$ ]]
    return $?
}

#function :util:cphash() {
#    local assoc_array_string=$(local -p $2)
#    eval "local -A $1=${assoc_array_string#*=}"
#    echo eval $(local -p $1)
#}
#
#function :util:locald() {
#    local -pA|awk 'BEGIN{e='${CODE_FAILURE}'};$0~/local .*'$1'=/{e='${CODE_SUCCESS}'};END{exit(e)}'
#    return $?
#}
#. }=-

#. ANSI2HTML -={
function :util:ansi2html() {
    ${SITE_LIBEXEC_CORE}/ansi2html
}
#. }=-

#. Markdown Scaffolding -={
function :util:markdown() {
    if read -t 0 -N 0; then
        if [ $# -gt 0 ]; then
            local op=$1
            shift

            {
                case ${op} in
                    h1) printf "# %s\n\n" "$@";;
                    h2) printf "# %s\n\n" "$@";;
                    h3) printf "# %s\n\n" "$@";;
                    h4) printf "# %s\n\n" "$@";;
                    h5) printf "# %s\n\n" "$@";;
                    h6) printf "# %s\n\n" "$@";;
                esac
                cat
                echo "###### vim:syntax=markdown"
            } | vimcat
        fi
    fi
}
#. Set Operations -={
#function :util:sets:explode() {
#    for item in $(eval echo \${$1[@]}); do
#        echo ${item}
#    done | sort
#}
#
#function :util:sets:set_union() {
#    sort -um <( explode $1) <(explode $2)
#}
#
#function :util:sets:set_intersect() {
#    comm -12 <(explode $1) <(explode $2)
#}
#
#function :util:sets:set_complement() {
#    comm -23 <(explode $1) <(explode $2)
#}
#
#function :util:sets:set_symdiff() {
#    sd=( $(comm -3 <(explode $1) <(explode $2)) )
#    explode sd
#}
#. }=-
